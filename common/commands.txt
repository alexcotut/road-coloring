# install: postgress, postgis, osm2pgsql, 

# create gis db:
# createdb -E UTF-8 -O USERNAME gis
# run postgis SQL scripts, paths on your system may differ:
# psql -d gis -f /usr/local/share/postgis/postgis.sql
# psql -d gis -f /usr/local/share/postgis/spatial_ref_sys.sql 
# psql -d gis -c "CREATE EXTENSION hstore"

# run daily:
wget -N http://download.geofabrik.de/europe/romania-latest.osm.pbf 2> download-status.txt
grep "not retrieving" download-status.txt
if [[ $? -eq 0 ]] ; then
    exit 1
fi
osm2pgsql --slim -d gis -C 16000 --hstore --number-processes 3 --style osm2pgsql.style  romania-latest.osm.pbf 


psql -t -A -d gis -c "select max(osm_timestamp) from planet_osm_line where highway in ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary', 'tertiary_link', 'construction')"> max.txt
psql -d gis -c "drop table lines_old;"
psql -d gis -c "select * into lines_old from planet_osm_line ;"

o2p/osm2pgsql/build/osm2pgsql --host localhost --slim -d gis -C 16000 --hstore --number-processes 3 --style osm2pgsql.style  --extra-attributes romania-latest.osm.pbf

#osm2pgsql --slim -d gis -C 16000 --hstore --number-processes 3 --style osm2pgsql.style  romania-latest.osm.pbf

(echo "insert into road_log select * from planet_osm_line where highway in ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary', 'tertiary_link', 'construction') and osm_timestamp > '"|cat - max.txt | tr -d '\n'  ; echo "'") | psql -d gis

psql -d gis -c "insert into smoothness_updates select a.osm_timestamp, b.osm_timestamp as old_timestamp, a.ref, a.osm_user, a.osm_changeset, b.osm_changeset as old_changeset, a.smoothness as new_smoothness, b.smoothness as old_smoothness, a.surface_survey as new_survey, b.surface_survey as old_survey from planet_osm_line a, lines_old b where a.osm_id= b.osm_id and (a.smoothness <> b.smoothness or a.surface_survey <> b.surface_survey)"      

psql -d gis -f cleanup.sql

psql -t -A -d gis -f smoothness-trunk.sql > main-roads.json
topojson -p -o main-roads.topo.json -- main-roads.json
(echo "mainRoads="; cat main-roads.topo.json ; echo ";";)> main-roads.topo.json.js

psql -t -A -d gis -f smoothness-other.sql > other-roads.json
topojson -p -o other-roads.topo.json -- other-roads.json
(echo "otherRoads="; cat other-roads.topo.json ; echo ";";)> other-roads.topo.json.js

psql -t -A -d gis -f all-roads.sql > all-roads.json
topojson -p -o all-roads.topo.json -- all-roads.json
(echo "allRoads="; cat all-roads.topo.json ; echo ";";)> all-roads.topo.json.js

-----
SET client_encoding = 'UTF8';

psql -d gis -c "SELECT  distinct max(osm_timestamp) as time, ref, osm_user, osm_changeset, old_smoothness, new_smoothness, new_survey from smoothness_updates group by osm_changeset, ref, osm_user, old_smoothness, new_smoothness, new_survey order by time desc"

select name, round(sum(ST_Length(ST_Transform(way,4326)::geography))/100)/10 as km from planet_osm_line where osm_id>0 and status is not null and status like '%builder%' and status like '%AC%' and  (construction not like 'motorway%') group by name;

select name, round(sum(ST_Length(ST_Transform(way,4326)::geography)/(case when lanes='4' then 1 else 2 end))/100)/10 as km from planet_osm_line where osm_id>0 and status is not null and status not like '%builder%' and status like '%AC%' and (proposed='motorway' or construction='motorway') group by name;

select osm_id, status from planet_osm_line, planet_osm_rels where id =7391166 and members @> array[concat('w', osm_id)];

update planet_osm_line set status='AC,builder:Salini Impregilo,progress_estimate:60%/24.07.2017' from planet_osm_rels where id =7391166 and members @> array[concat('w', osm_id)];

function unaccent_string:

  SELECT translate($1, 'ăîșțâ','aista');
			 
function search:

SELECT row_to_json(fc)::text
  FROM
  ( SELECT 'FeatureCollection' As type, array_to_json(array_agg(f)) As features  
   FROM (SELECT 'Feature' As type,         
       ST_AsGeoJSON(ST_Transform(lg.way, 4326))::json As geometry,     
          (
                   select row_to_json(t) from     
                   (select
		   ST_AsGeoJSON(ST_Transform(ST_centroid(way), 4326)) as center, 
                   ST_xmax(way)-ST_xmin(way) as width, 
                   ST_ymax(way)-ST_ymin(way) as height,  
                   type 
                   ) t  
            ) AS properties
                              FROM(
                              (SELECT way as way,  '0' as type FROM planet_osm_polygon WHERE unaccent_string(lower($1)) = unaccent_string(lower(name)) and place is not null) 
                              union
                              (SELECT way as way, '1' as type FROM planet_osm_point WHERE unaccent_string(lower($1))= unaccent_string(lower(name)) and place is not null) 
                              union  
                             (SELECT ST_union(way) as way, '2' as type FROM planet_osm_line WHERE highway is not null and lower($1) in (lower(osm_id::text), lower(name), lower(ref))
                             --and not highway in ('construction', 'proposed') 
                             group by highway) 
                              ) 
 as lg  
  order by lg.type, st_length(lg.way) desc  )As f 
 )  As fc; 
